user nginx;
worker_processes 1;

daemon off;

events {
    worker_connections 1024;
}

error_log   /usr/local/nginx/logs/error.log warn;
pid         /usr/local/nginx/logs/nginx.pid;

rtmp_auto_push on;

rtmp {
    server {
        listen 1935;
        chunk_size 4000;

        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #

        application stream {
          live on;

          # exec_kill_signal 8;

          exec_push ffmpeg
            -i rtmp://localhost/stream/$name
            -vcodec copy
            -acodec copy
            -hls_time 5
            -hls_playlist_type event
            -method PUT
            http://localhost:5005/s3/$name/master.m3u8 2>>/tmp/ffmpeglogs.txt;

          # Authentication
          on_publish http://localhost:5005/auth;
        }
    }
}

http {
    include /usr/local/nginx/conf/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /usr/local/nginx/logs/access.log main;

    sendfile on;
    #tcp_nopush on;

    keepalive_timeout 65;

    gzip on;

    include /usr/local/nginx/conf/conf.d/*.conf;
}
